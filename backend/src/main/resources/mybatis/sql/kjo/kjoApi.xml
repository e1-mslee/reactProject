<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.e1.backend.mapper.KjoApiMapper">
    <select id="selectMainTable" parameterType="map" resultType="map">
        select TABLE_SEQ    as tableSeq,
               TABLE_ID     as tableId,
               TABLE_NAME   as tableName,
               VBG_CRE_USER as vbgCreUser,
               VBG_CRE_DTM  as vbgCreDtm,
               0            as dataCount,
               false        as selected
          from std_main
         <where>
            <if test="search != null and search != ''">
                and (
                    TABLE_NAME like concat('%', #{search}, '%')
                    or TABLE_ID like concat('%', #{search}, '%')
                )
            </if>
            <if test="start != null and start != ''">
                and VBG_CRE_DTM &gt;= #{start}
            </if>
            <if test="end != null and end != ''">
                and VBG_CRE_DTM &lt;= #{end}
            </if>
         </where>
    </select>

    <insert id="insertMainTable" parameterType="map">
        insert into std_main
            (TABLE_ID, TABLE_NAME, VBG_CRE_USER, VBG_CRE_DTM)
        values
            <foreach collection="list" item="item" separator=",">
                (#{item.tableId}, #{item.tableName}, '김정욱', now())
            </foreach>
    </insert>

    <select id="definitionMainTable" parameterType="string">
            ${query}
    </select>

    <update id="updateMainTable" parameterType="list">
        update std_main
           set TABLE_ID     = #{tableId},
               TABLE_NAME   = #{tableNm},
               VBG_CRE_DTM  = now()
         where TABLE_SEQ    = #{tableSeq}
    </update>

    <delete id="deleteMainTable" parameterType="list">
        delete from std_main
         where TABLE_SEQ in
         <foreach collection="list" item="item" separator="," open="(" close=")">
             #{item.tableSeq}
         </foreach>
    </delete>

    <select id="selectTableName" parameterType="map">
        select TABLE_NAME   as tableName,
               TABLE_ID     as tableId
          from std_main
         where TABLE_SEQ = #{tableSeq}
    </select>

    <select id="selectFieldTable" parameterType="map">
        select TABLE_SEQ    as tableSeq,
               COL_ID       as colId,
               COL_NAME     as colName,
               COL_TYPE     as colType,
               COL_SIZE     as colSize,
               case when COL_IDX = 1 then true
                    else false
                   end      as colIdx,
               case when COL_SCH = 1 then true
                    else false
                   end      as colSch,
               false        as selected
        from std_field
        where TABLE_SEQ = #{tableSeq}
    </select>

    <insert id="insertFieldTable" parameterType="map">
        insert into std_field
            (TABLE_SEQ, COL_ID, COL_NAME, COL_TYPE, COL_SIZE, COL_IDX, COL_SCH, VBG_CRE_USER, VBG_CRE_DTM)
        values
            <foreach collection="list" item="item" separator=",">
                (#{item.tableSeq}, #{item.colId}, #{item.colName}, #{item.colType}, #{item.colSize}, #{item.colIdx}, #{item.colSch}, '김정욱', now())
            </foreach>
    </insert>

    <update id="updateFieldTable" parameterType="map">
        update std_field
           set COL_NAME = #{colName},
               COL_TYPE = #{colType},
               COL_SIZE = #{colSize},
               COL_IDX = #{colIdx},
               COL_SCH = #{colSch},
               VBG_CRE_DTM = now()
         where TABLE_SEQ = #{tableSeq}
           and COL_ID = #{colId}
    </update>

    <delete id="deleteFieldTable" parameterType="map">
        delete from std_field
         where TABLE_SEQ = #{tableSeq}
           <if test="colId != null and colId != ''">
                and COL_ID = #{colId}
           </if>
    </delete>

    <select id="selectHeaderTable" parameterType="map">
        select false        as selected,
               TABLE_SEQ    as tableSeq,
               HEADER_ID    as headerId,
               HEADER_NAME  as headerName,
               SUPI_HEADER  as supiHeader,
               HEADER_WIDTH as headerWidth,
               CONN_FIELD   as connField,
               SORT_SN      as sortSn
          from std_header
         where TABLE_SEQ = #{tableSeq}
         order by SORT_SN
    </select>

    <insert id="insertHeaderTable" parameterType="map">
        insert into std_header
            (TABLE_SEQ, HEADER_ID, HEADER_NAME, SUPI_HEADER, HEADER_WIDTH, CONN_FIELD, SORT_SN)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.tableSeq}, #{item.headerId}, #{item.headerName}, #{item.supiHeader}, #{item.headerWidth}, #{item.connField}, #{item.sortSn})
        </foreach>
    </insert>

    <update id="updateHeaderTable" parameterType="map">
        update std_header
           set HEADER_NAME = #{headerName},
               SUPI_HEADER = #{supiHeader},
               HEADER_WIDTH = #{headerWidth},
               CONN_FIELD = #{connField},
               SORT_SN = #{sortSn}
         where TABLE_SEQ = #{tableSeq}
           and HEADER_ID = #{headerId}
    </update>

    <delete id="deleteHeaderTable" parameterType="map">
        delete from std_header
         where TABLE_SEQ = #{tableSeq}
           <if test="headerId != null and headerId != ''">
                and HEADER_ID = #{headerId}
           </if>
    </delete>

    <select id="selectHeaderId" parameterType="map">
        select HEADER_ID    as headerId,
               HEADER_NAME  as headerName
          from std_header
         where TABLE_SEQ = #{tableSeq}
         order by HEADER_ID
    </select>

    <select id="selectGridHeaderTable" parameterType="map">
        with recursive cte(TABLE_SEQ, HEADER_ID, HEADER_NAME, SUPI_HEADER, HEADER_WIDTH, CONN_FIELD, SORT_SN, dept) as (
            select TABLE_SEQ,
                   HEADER_ID,
                   HEADER_NAME,
                   SUPI_HEADER,
                   HEADER_WIDTH,
                   CONN_FIELD,
                   cast(SORT_SN as char(100)) as sort_sn,
                   0 as dept
             from std_header
            where TABLE_SEQ = #{tableSeq} and SUPI_HEADER = ''
            union all
            select a.TABLE_SEQ,
                   a.HEADER_ID,
                   a.HEADER_NAME,
                   a.SUPI_HEADER,
                   a.HEADER_WIDTH,
                   a.CONN_FIELD,
                   cast(concat(h.SORT_SN,'-',a.SORT_SN) as char(100)) as sort_sn,
                   h.dept + 1 as dept
              from std_header a
              join cte h
                on a.TABLE_SEQ = h.TABLE_SEQ and a.SUPI_HEADER = h.HEADER_ID
        )
        select TABLE_SEQ    as tableSeq,
               HEADER_ID    as headerId,
               HEADER_NAME  as headerName,
               SUPI_HEADER  as supiHeader,
               HEADER_WIDTH as headerWidth,
               CONN_FIELD   as connField,
               SORT_SN      as sortSn,
               dept,
               (select count(*) from std_header h where h.SUPI_HEADER = c.HEADER_ID and TABLE_SEQ = #{tableSeq}) as child
          from cte c
         order by sort_sn
    </select>

    <select id="selectColTypeCode" resultType="map">
        select COM_CD       as code,
               COM_CD_EN    as value
          from comm_code
         where COM_CD_ID = '00001'
    </select>
</mapper>